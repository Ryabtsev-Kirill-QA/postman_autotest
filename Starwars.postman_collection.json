{
	"info": {
		"_postman_id": "3e21ce3e-03ed-475b-97ed-249ccdca8159",
		"name": "Starwars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23835753"
	},
	"item": [
		{
			"name": "People",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ожидаю статус ответа 200\", function() {pm.response.to.have.status(200);})\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {pm.expect(pm.response.responseTime).to.be.below(200);});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {pm.response.to.have.status(\"OK\");});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"a\", \"/api/\");\r",
							"\r",
							"pm.test(\"Body matches correct name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Obi-Wan Kenobi\");\r",
							"});\r",
							"\r",
							"pm.test(\"Person parametrs\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.height).to.eql(\"182\");\r",
							"  pm.expect(responseJson.mass).to.eql(\"77\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData.mass).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}{{a}}people/10/",
					"host": [
						"{{host}}{{a}}people"
					],
					"path": [
						"10",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Planets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ожидаю статус ответа 200\", function() {pm.response.to.have.status(200);})\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {pm.expect(pm.response.responseTime).to.be.below(200);});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {pm.response.to.have.status(\"OK\");});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"a\", \"/api/\");\r",
							"\r",
							"pm.test(\"Body matches correct name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Endor\");\r",
							"});\r",
							"\r",
							"pm.test(\"Person parametrs\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.diameter).to.eql(\"4900\");\r",
							"  pm.expect(responseJson.population).to.eql(\"30000000\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData.orbital_period).to.be.a(\"number\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/planets/7/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"planets",
						"7",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Starships",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ожидаю статус ответа 200\", function() {pm.response.to.have.status(200);})\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {pm.expect(pm.response.responseTime).to.be.below(200);});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {pm.response.to.have.status(\"OK\");});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"a\", \"/api/\");\r",
							"\r",
							"pm.test(\"Body matches correct name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Sentinel-class landing craft\");\r",
							"});\r",
							"\r",
							"pm.test(\"Person parametrs\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.length).to.eql(\"38\");\r",
							"  pm.expect(responseJson.crew).to.eql(\"5\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData.passengers).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/starships/5/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"starships",
						"5",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://swapi.dev",
			"type": "string"
		},
		{
			"key": "a",
			"value": ""
		}
	]
}